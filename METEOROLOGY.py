# -*- coding: utf-8 -*-
"""METEO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N58HdicxDG8aSKI7Bnhcp-ZkmrKECnuE
"""

test_data_text = '''
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
cRYNguqp9X9ui5tPvhsAAA==
'''

train_data_text = '''
H4sIAJZ3jGQAA5V92c5tuW3mfT/L7g3Nw9M0AriA+MKBETto9Nu3OEkkpV1x/iqf41q/lpYGijM/
/eXf/vnH529//Nt//POPv/398+//9be//uWv//x/n//71//4y//5x9//+OMv+Mu//+cf//jHf/3n
H/8rhZj/d4jr308M3/AZ5Vs/8H9iiPXb9M9pmz79Wz4zrWbpOwe07d9xfp/X76N5t39GX63Lt2X9
U+DV8esz5eN+1dqnx6/pIX/iN+W7UzeA02n9NJhm+w7bTf62aX46dNO+9by6vg6vpu+a8bcMGns4
v+/4+74Gvb6xBhZS0L8eazqj9liS/Dk+LX/1gx4rLJ1+UDJ9xzQ7nc5PLOujda1C/cS0Ng8nfz4b
11bG1aLBbvVvtpOsf7bPcdFEdeMr+Ck7DaCcapvR2plHp9tEY+7wR8zfZLujEeknakQZRjTcdvdq
N7u/6Swbyimn0wIL5zsdw3cavs0TNQ71TWhrJ9cs/eIt8jWTbavXmtwj7FU/m6fXBit2jbV9mx9r
oC34sbNr6Iu0PyP4Y1AXHQX1E3k075Ubr9EsvuBWbnzn3WlRRytOot1+TWR92o1wHav4Y1oJad0v
5yIP82iu8RSzMYnOqjl1p9OInX56R3aXEo3gnLD1ZMLYpx97/gY79kqvHk6ZMh2FFhy/LIuEg1tF
HONZs1Rei796aq6ndvFi3xNyjvVngymus1epRVdNGjSxPS8uV/xOL7Yarp2ev7ar48HzLLE6ZoIj
sk+QI765CzCQci1LBab/ZvH9B3EnZK0RlmUNYL2ccq98qNJZmRye5zx8PRP/hnoRHXz8ec5zhAOa
4NMNZGyjKcvoEsprmFPPhyrhwWmQsAfHqRcR+6X8ZtuIF+W1uglEO8i8xyY5xsbzq89DlUC2r2+Y
JVrUsCSCO6nr5EW3tMQ6HuIhgXCn3QEeBLs1v92wM5ZLeVN2Aqnu2WQbDzVjOJGSf6suCVQBkKqf
Or8w4G8XRee0GCwEL0KZ6yTqhWx/uh8TPlTcqrVbRD97bU/qS6gzgCCAZQDKL73oYyMjSmcVSVUY
a8nXhOo6sTlVqz8llPvVLSueFLeuiy4uzrc+pzrKT9IOTnECRe+mbH1GIlKh/XwCncyyj7aYsW2U
iQpfkj+h5J+O5yJbu7r4RvMhXLG3bEso+cu104vOneK1mMSlToShJ91BbnhWPkFjYK0h/RrCIKpe
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
D341oKr+f6XpikF6MQEA
'''

"""IMPORT


"""

#from pandas import read_csv
from pandas_datareader import data as pdr
import pandas as pd
import warnings

import numpy as np

import datetime as dt
from keras.models import Sequential
from keras.layers import Dense, SimpleRNN, LSTM, Dropout
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import math
import matplotlib.pyplot as plt
import matplotlib as mpl

from numpy import array
from numpy import hstack

from io import StringIO, BytesIO
import base64
import gzip

pd.set_option('display.max_rows', None)
warnings.filterwarnings("ignore")

num_of_years = 1
start = dt.date.today() - dt.timedelta(days = int(365.25*num_of_years))
end = dt.date.today()

def create_RNN(hidden_units, dense_units, input_shape, activation):
    model = Sequential()
    model.add(SimpleRNN(hidden_units, input_shape=input_shape,
                        activation=activation[0]))
    model.add(Dense(units=dense_units, activation=activation[1]))
    model.compile(loss='mean_squared_error', optimizer='adam')
    return model

# hidden units tiene el valor de la longitud de la serie de datos.

def create_LSTM_RNN(hidden_units, dense_units, input_shape, activation, dropout):
    model = Sequential()
    model.add(LSTM(units = hidden_units, activation = activation[0], return_sequences = True, input_shape = input_shape))
    model.add(Dropout(dropout))
    model.add(LSTM(units = hidden_units, activation = activation[0], return_sequences = True))
    model.add(Dropout(dropout))
    model.add(LSTM(units = int(hidden_units*1.5), activation = activation[0], return_sequences = True))
    model.add(Dropout(dropout))
    model.add(LSTM(units = int(hidden_units*2.0), activation = activation[0]))
    model.add(Dropout(dropout))
    model.add(Dense(units=dense_units, activation=activation[1]))
    model.compile(loss='mean_squared_error', optimizer='adam')
    return model

demo_model_antic = create_RNN(2, 1, (3,1), ['linear', 'linear'])
demo_model = create_LSTM_RNN(2, 1, (3,1), ['relu', 'relu'], 0.2)

def get_train_test_meteo(train_data_text, test_data_text):
    b64decoded = base64.b64decode(train_data_text) # base64 decode
    uncompressGzip = gzip.GzipFile(fileobj=BytesIO(b64decoded), mode='rb') # gzip uncompress
    original_data = uncompressGzip.read().decode("utf-8")
    train_df = pd.read_csv(StringIO(original_data), usecols=[1, 2, 3, 4], engine='python')

    data = np.array(train_df.values.astype('float32'))
    scaler = MinMaxScaler(feature_range=(0, 1))
    train_data = scaler.fit_transform(data)#.flatten()


    b64decoded = base64.b64decode(test_data_text) # base64 decode
    uncompressGzip = gzip.GzipFile(fileobj=BytesIO(b64decoded), mode='rb') # gzip uncompress
    original_data = uncompressGzip.read().decode("utf-8")
    test_df = pd.read_csv(StringIO(original_data), usecols=[1, 2, 3, 4], engine='python')

    data = np.array(test_df.values.astype('float32'))
    scaler = MinMaxScaler(feature_range=(0, 1))
    test_data = scaler.fit_transform(data)#.flatten()

    data = np.concatenate((train_data,test_data))

    return train_data, test_data, data

train_data, test_data, data = get_train_test_meteo(train_data_text, test_data_text)

time_series = np.array([[e[0] for e in data], [e[1] for e in data], [e[2] for e in data], [e[3] for e in data]])
corrs = np.corrcoef(time_series)

print(corrs)

labels = ["Temp", "Humidity", "Wind speed", "Pressure"]

fig, ax = plt.subplots()
im = ax.imshow(np.abs(corrs))
ax.set_xticks(np.arange(len(labels)), labels=labels)
ax.set_yticks(np.arange(len(labels)), labels=labels)

# Prepare the input X and target Y
def get_XY(dat, time_steps):
    # Indices of target array
    Y_ind = np.arange(time_steps, len(dat), time_steps)
    Y = dat[Y_ind]
    # Prepare X
    rows_x = len(Y)
    X = dat[range(time_steps*rows_x)]
    X = np.reshape(X, (rows_x, time_steps, 4))
    return X, Y

time_steps = 20
trainX, trainY = get_XY(train_data, time_steps)
testX, testY = get_XY(test_data, time_steps)

model = create_LSTM_RNN(60, 4, (time_steps,4), ['relu', 'relu'], 0.2)
model.fit(trainX, trainY, epochs=50, batch_size=32, verbose=2)

def print_error(trainY, testY, train_predict, test_predict):
    # Error of predictions
    train_rmse = math.sqrt(mean_squared_error(trainY, train_predict))
    test_rmse = math.sqrt(mean_squared_error(testY, test_predict))
    # Print RMSE
    print('Train RMSE: %.3f RMSE' % (train_rmse))
    print('Test RMSE: %.3f RMSE' % (test_rmse))

# make predictions
train_predict = model.predict(trainX)
test_predict = model.predict(testX)
# Mean square error
print_error(trainY, testY, train_predict, test_predict)

# Plot the result
def plot_result(trainY, testY, train_predict, test_predict, ylabel):
    actual = np.append(trainY, testY)
    predictions = np.append(train_predict, test_predict)
    rows = len(actual)
    plt.figure(figsize=(15, 6), dpi=80)
    plt.plot(range(rows), actual)
    plt.plot(range(rows), predictions)
    plt.axvline(x=len(trainY), color='r')
    plt.legend(['Actual', 'Predictions'])
    plt.xlabel('Observation number after given time steps')
    plt.ylabel(ylabel + ' scaled')
    plt.title('Actual and Predicted Values. The Red Line Separates The Training And Test Examples')

plot_result(trainY[:,0], testY[:,0], train_predict[:,0], test_predict[:,0], labels[0])
plot_result(trainY[:,1], testY[:,1], train_predict[:,1], test_predict[:,1], labels[1])
plot_result(trainY[:,2], testY[:,2], train_predict[:,2], test_predict[:,2], labels[2])
plot_result(trainY[:,3], testY[:,3], train_predict[:,3], test_predict[:,3], labels[3])